#! /usr/bin/env python3

#!/usr/bin/env python

import ansible_runner
import os
import re
import time
import argparse
import shutil
from termcolor import colored

ansible_tests_list = []
ansible_run_list = []
tests_list = []
iterations = 20
maxfailures = 3
keepartifacts = 5
debug = False
inventory_prefix_dir = 'looper'


def parse_command_line():
    parser = argparse.ArgumentParser(
        description='Run ansible playbook concurrently and with loops')
    parser.add_argument('-t', '--tests', dest='test_directory',
                        required=True, action='store', help='Tests Directory')
    parser.add_argument('-i', '--inventory', dest='inventory_location',
                        required=True, action='store', help='Inventory file or directory')
    parser.add_argument('-s', '--scenario', dest='scenario_name',
                        action='store', choices={'concurrent', 'sequential'}, default='sequential', help='Execution scenario')
    args = parser.parse_args()
    check_arguments(args)
    return(args)


def check_arguments(args):
    if not os.path.isdir(args.test_directory):
        raise SystemError('Test directory does not exist')


def get_tests(test_directory):
    directories = os.listdir(test_directory)
    tests = []
    for i in directories:
        if re.match('^[0-9][0-9].*', i):
            setup = test = cleanup = False
            if os.path.isfile(test_directory + '/' + i + '/project/setup.yml'):
                setup = True
            if os.path.isfile(test_directory + '/' + i + '/project/test.yml'):
                test = True
            if os.path.isfile(test_directory + '/' + i + '/project/cleanup.yml'):
                cleanup = True
            if setup or test or cleanup:
                tests.append(
                    {'subtest': i, 'test_directory': test_directory, 'test': test, 'setup': setup, 'cleanup': cleanup})
    if tests:
        return(tests)
    else:
        raise SystemError('Test directory does not contain any tests')


def launch_ansible_test(test_to_launch, test_directory, test_type, invocation, failure_count):
    (t, r) = ansible_runner.interface.run_async(
        private_data_dir=test_directory + '/' + test_to_launch,
        playbook=test_type + '.yml',
        rotate_artifacts=keepartifacts,
        ident=test_type + '_' + str(invocation) + '_' + str(failure_count))
    return({
        'thread': t,
        'runner': r,
        'test': test_to_launch,
        'test_type': test_type,
        'test_directory': test_directory
    })


def launch_ansible_tests(list_of_tests, test_type):
    running_tests = []
    for test in list_of_tests:
        if test_type in test and test[test_type]:
            launched_test = launch_ansible_test(
                test['subtest'], test['test_directory'], test_type, 1, 0)
            running_tests.append({
                'thread': launched_test['thread'],
                'runner': launched_test['runner'],
                'test_name': launched_test['test'],
                'test_directory': launched_test['test_directory'],
                'test_type': test_type,
                'iteration': 1,
                'failures': 0
            })
            print(colored("Launching : {} - {} :{}: iteration {}".format(
                launched_test['test'], launched_test['runner'].status,
                test_type, 1), 'yellow')
            )
    return(running_tests)


def check_ansible_loop(run_list, iteration):
    while run_list:
        for test in run_list:
            if test['runner'].status == 'successful':
                if test['iteration'] >= iteration:
                    run_list.remove(test)
                    print(colored("Complete : {} - {} :{}: iteration {}".format(
                        test['test_name'], test['runner'].status,
                        test['test_type'], test['iteration']), 'green')
                    )
                else:
                    test['iteration'] += 1
                    launched_test = launch_ansible_test(
                        test['test_name'], test['test_directory'], test['test_type'], test['iteration'], test['failures'])
                    test['thread'] = launched_test['thread']
                    test['runner'] = launched_test['runner']
                    print(colored("Launching : {} - {} :{}: iteration {}".format(
                        test['test_name'], test['runner'].status,
                        test['test_type'], test['iteration']), 'yellow')
                    )
            elif test['runner'].status == 'running' or test['runner'].status == 'starting':
                if debug:
                    print(colored("Running : {} - {} :{}: iteration {}".format(
                        test['test_name'], test['runner'].status,
                        test['test_type'], test['iteration']), 'cyan')
                    )
            else:
                if test['failures'] >= maxfailures:
                    run_list.remove(test)
                    print(colored("Error : {} - {}: {}: iteration {} Max failures exceeded, removeing test".format(
                        test['test_name'], test['runner'].status,
                        test['test_type'], test['iteration']), 'red')
                    )
                else:
                    test['failures'] += 1
                    launched_test = launch_ansible_test(
                        test['test_name'], test['test_directory'], test['test_type'], test['iteration'], test['failures'])
                    test['thread'] = launched_test['thread']
                    test['runner'] = launched_test['runner']
                    print(colored("Re-launching : {} - {} :{}: iteration {}".format(
                        test['test_name'], test['runner'].status,
                        test['test_type'], test['iteration']), 'magenta')
                    )
        time.sleep(2)


def setup_ansible_inventory(list_of_tests, inventory):
    if not os.path.exists(inventory):
        raise SystemError(
            'Global inventory file does not exist: ' + inventory)
    else:
        full_path_inventory = os.path.abspath(inventory)
        subtest_inventory_file = os.path.basename(full_path_inventory)
        for test in list_of_tests:
            test_inventory_dir = os.path.abspath(os.path.join(
                test['test_directory'], test['subtest'], 'inventory'))
            subtest_inventory_dir = os.path.join(
                test_inventory_dir, inventory_prefix_dir)
            subtest_inventory_path = os.path.join(
                subtest_inventory_dir, subtest_inventory_file)

            if not os.path.isdir(test_inventory_dir):
                raise SystemError(
                    'Test inventory directory does not exist for test : ' + test_inventory_dir)

            if os.path.exists(subtest_inventory_dir) and os.path.isdir(subtest_inventory_dir):
                try:
                    shutil.rmtree(subtest_inventory_dir)
                except:
                    raise SystemError(
                        'Test inventory dir could not be deleted for : ' + subtest_inventory_dir)
            if not os.path.exists(subtest_inventory_dir):
                try:
                    os.mkdir(subtest_inventory_dir)
                except:
                    raise SystemError(
                        'Test inventory dir could not be created for : ' + subtest_inventory_dir)
            else:
                raise SystemError(
                    'Test inventory path exists and is not a directory : ' + subtest_inventory_dir)

            if os.path.exists(subtest_inventory_path) or os.path.islink(subtest_inventory_path):
                if not os.path.islink(subtest_inventory_path):
                    raise SystemError(
                        'Test inventory file exists and is not a symlink for: ' + subtest_inventory_path)
                elif os.path.islink(subtest_inventory_path):
                    try:
                        os.remove(subtest_inventory_path)
                    except:
                        raise SystemError(
                            'Test inventory file could not be deleted for' + subtest_inventory_path)
                else:
                    raise SystemError(
                        'Impossible condition.  Test inventory file could not be deleted for' + subtest_inventory_path)
            try:
                os.symlink(full_path_inventory, subtest_inventory_path)
            except:
                raise SystemError(
                    'Test inventory file could not be created for' + subtest_inventory_path)


def run_scenario(list_of_tests, scenario):
    setup_ansible_inventory(list_of_tests, args.inventory_location)
    if scenario == 'concurrent':
        ansible_run_list = launch_ansible_tests(list_of_tests, 'setup')
        check_ansible_loop(ansible_run_list, 1)
        ansible_run_list = launch_ansible_tests(list_of_tests, 'test')
        check_ansible_loop(ansible_run_list, iterations)
        ansible_run_list = launch_ansible_tests(list_of_tests, 'cleanup')
        check_ansible_loop(ansible_run_list, 1)
    elif scenario == 'sequential':
        raise SystemError('Unimplimented as yet')


if __name__ == '__main__':
    args = parse_command_line()
    ansible_tests_list = get_tests(args.test_directory)
    run_scenario(ansible_tests_list, args.scenario_name)
